/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Any component
 */
export type Component =
  | Actionable
  | Button
  | Carousel
  | Checkbox
  | Container
  | DropdownButton
  | Flex
  | Flexible
  | Form
  | Icon
  | Image
  | Menu
  | MenuItem
  | OverlayEntry
  | Radio
  | Slider
  | Stack
  | StatusSticker
  | Text
  | TextField
  | Toggle
  | View
  | Wrap;
/**
 * Any component
 */
export type Component1 =
  | Actionable
  | Button
  | Carousel
  | Checkbox
  | Container
  | DropdownButton
  | Flex
  | Flexible
  | Form
  | Icon
  | Image
  | Menu
  | MenuItem
  | OverlayEntry
  | Radio
  | Slider
  | Stack
  | StatusSticker
  | Text
  | TextField
  | Toggle
  | View
  | Wrap;
/**
 * The size to use, the component will be sized according to the value.
 */
export type Size = "small" | "medium" | "large";
/**
 * The style to use, the component will be changed according to the theme.
 */
export type Style = "primary" | "secondary" | "tertiary";
/**
 * The color of the Icon. If not set or null, the color is inherited from the theme.
 */
export type Color = number;
/**
 * The value of the Icon
 */
export type IconName =
  | "ac_unit"
  | "access_alarm"
  | "access_alarms"
  | "access_time"
  | "access_time_filled"
  | "accessibility"
  | "accessibility_new"
  | "accessible"
  | "accessible_forward"
  | "account_balance"
  | "account_balance_wallet"
  | "account_box"
  | "account_circle"
  | "account_tree"
  | "ad_units"
  | "adb"
  | "add"
  | "add_a_photo"
  | "add_alarm"
  | "add_alert"
  | "add_box"
  | "add_business"
  | "add_call"
  | "add_chart"
  | "add_circle"
  | "add_circle_outline"
  | "add_comment"
  | "add_ic_call"
  | "add_link"
  | "add_location"
  | "add_location_alt"
  | "add_moderator"
  | "add_photo_alternate"
  | "add_reaction"
  | "add_road"
  | "add_shopping_cart"
  | "add_task"
  | "add_to_drive"
  | "add_to_home_screen"
  | "add_to_photos"
  | "add_to_queue"
  | "addchart"
  | "adjust"
  | "admin_panel_settings"
  | "agriculture"
  | "air"
  | "airline_seat_flat"
  | "airline_seat_flat_angled"
  | "airline_seat_individual_suite"
  | "airline_seat_legroom_extra"
  | "airline_seat_legroom_normal"
  | "airline_seat_legroom_reduced"
  | "airline_seat_recline_extra"
  | "airline_seat_recline_normal"
  | "airplane_ticket"
  | "airplanemode_active"
  | "airplanemode_inactive"
  | "airplanemode_off"
  | "airplanemode_on"
  | "airplay"
  | "airport_shuttle"
  | "alarm"
  | "alarm_add"
  | "alarm_off"
  | "alarm_on"
  | "album"
  | "align_horizontal_center"
  | "align_horizontal_left"
  | "align_horizontal_right"
  | "align_vertical_bottom"
  | "align_vertical_center"
  | "align_vertical_top"
  | "all_inbox"
  | "all_inclusive"
  | "all_out"
  | "alt_route"
  | "alternate_email"
  | "amp_stories"
  | "analytics"
  | "anchor"
  | "android"
  | "animation"
  | "announcement"
  | "aod"
  | "apartment"
  | "api"
  | "app_blocking"
  | "app_registration"
  | "app_settings_alt"
  | "approval"
  | "apps"
  | "architecture"
  | "archive"
  | "arrow_back"
  | "arrow_back_ios"
  | "arrow_back_ios_new"
  | "arrow_circle_down"
  | "arrow_circle_up"
  | "arrow_downward"
  | "arrow_drop_down"
  | "arrow_drop_down_circle"
  | "arrow_drop_up"
  | "arrow_forward"
  | "arrow_forward_ios"
  | "arrow_left"
  | "arrow_right"
  | "arrow_right_alt"
  | "arrow_upward"
  | "art_track"
  | "article"
  | "aspect_ratio"
  | "assessment"
  | "assignment"
  | "assignment_ind"
  | "assignment_late"
  | "assignment_return"
  | "assignment_returned"
  | "assignment_turned_in"
  | "assistant"
  | "assistant_direction"
  | "assistant_navigation"
  | "assistant_photo"
  | "atm"
  | "attach_email"
  | "attach_file"
  | "attach_money"
  | "attachment"
  | "attractions"
  | "attribution"
  | "audiotrack"
  | "auto_awesome"
  | "auto_awesome_mosaic"
  | "auto_awesome_motion"
  | "auto_delete"
  | "auto_fix_high"
  | "auto_fix_normal"
  | "auto_fix_off"
  | "auto_graph"
  | "auto_stories"
  | "autofps_select"
  | "autorenew"
  | "av_timer"
  | "baby_changing_station"
  | "backpack"
  | "backspace"
  | "backup"
  | "backup_table"
  | "badge"
  | "bakery_dining"
  | "balcony"
  | "ballot"
  | "bar_chart"
  | "batch_prediction"
  | "bathroom"
  | "bathtub"
  | "battery_alert"
  | "battery_charging_full"
  | "battery_full"
  | "battery_saver"
  | "battery_std"
  | "battery_unknown"
  | "beach_access"
  | "bed"
  | "bedroom_baby"
  | "bedroom_child"
  | "bedroom_parent"
  | "bedtime"
  | "beenhere"
  | "bento"
  | "bike_scooter"
  | "biotech"
  | "blender"
  | "block"
  | "block_flipped"
  | "bloodtype"
  | "bluetooth"
  | "bluetooth_audio"
  | "bluetooth_connected"
  | "bluetooth_disabled"
  | "bluetooth_drive"
  | "bluetooth_searching"
  | "blur_circular"
  | "blur_linear"
  | "blur_off"
  | "blur_on"
  | "bolt"
  | "book"
  | "book_online"
  | "bookmark"
  | "bookmark_add"
  | "bookmark_added"
  | "bookmark_border"
  | "bookmark_outline"
  | "bookmark_remove"
  | "bookmarks"
  | "border_all"
  | "border_bottom"
  | "border_clear"
  | "border_color"
  | "border_horizontal"
  | "border_inner"
  | "border_left"
  | "border_outer"
  | "border_right"
  | "border_style"
  | "border_top"
  | "border_vertical"
  | "branding_watermark"
  | "breakfast_dining"
  | "brightness_1"
  | "brightness_2"
  | "brightness_3"
  | "brightness_4"
  | "brightness_5"
  | "brightness_6"
  | "brightness_7"
  | "brightness_auto"
  | "brightness_high"
  | "brightness_low"
  | "brightness_medium"
  | "broken_image"
  | "browser_not_supported"
  | "brunch_dining"
  | "brush"
  | "bubble_chart"
  | "bug_report"
  | "build"
  | "build_circle"
  | "bungalow"
  | "burst_mode"
  | "bus_alert"
  | "business"
  | "business_center"
  | "cabin"
  | "cable"
  | "cached"
  | "cake"
  | "calculate"
  | "calendar_today"
  | "calendar_view_day"
  | "calendar_view_month"
  | "calendar_view_week"
  | "call"
  | "call_end"
  | "call_made"
  | "call_merge"
  | "call_missed"
  | "call_missed_outgoing"
  | "call_received"
  | "call_split"
  | "call_to_action"
  | "camera"
  | "camera_alt"
  | "camera_enhance"
  | "camera_front"
  | "camera_indoor"
  | "camera_outdoor"
  | "camera_rear"
  | "camera_roll"
  | "cameraswitch"
  | "campaign"
  | "cancel"
  | "cancel_presentation"
  | "cancel_schedule_send"
  | "car_rental"
  | "car_repair"
  | "card_giftcard"
  | "card_membership"
  | "card_travel"
  | "carpenter"
  | "cases"
  | "casino"
  | "cast"
  | "cast_connected"
  | "cast_for_education"
  | "catching_pokemon"
  | "category"
  | "celebration"
  | "cell_wifi"
  | "center_focus_strong"
  | "center_focus_weak"
  | "chair"
  | "chair_alt"
  | "chalet"
  | "change_circle"
  | "change_history"
  | "charging_station"
  | "chat"
  | "chat_bubble"
  | "chat_bubble_outline"
  | "check"
  | "check_box"
  | "check_box_outline_blank"
  | "check_circle"
  | "check_circle_outline"
  | "checklist"
  | "checklist_rtl"
  | "checkroom"
  | "chevron_left"
  | "chevron_right"
  | "child_care"
  | "child_friendly"
  | "chrome_reader_mode"
  | "circle"
  | "circle_notifications"
  | "class_"
  | "clean_hands"
  | "cleaning_services"
  | "clear"
  | "clear_all"
  | "close"
  | "close_fullscreen"
  | "closed_caption"
  | "closed_caption_disabled"
  | "closed_caption_off"
  | "cloud"
  | "cloud_circle"
  | "cloud_done"
  | "cloud_download"
  | "cloud_off"
  | "cloud_queue"
  | "cloud_upload"
  | "code"
  | "code_off"
  | "coffee"
  | "coffee_maker"
  | "collections"
  | "collections_bookmark"
  | "color_lens"
  | "colorize"
  | "comment"
  | "comment_bank"
  | "commute"
  | "compare"
  | "compare_arrows"
  | "compass_calibration"
  | "compress"
  | "computer"
  | "confirmation_num"
  | "confirmation_number"
  | "connect_without_contact"
  | "connected_tv"
  | "construction"
  | "contact_mail"
  | "contact_page"
  | "contact_phone"
  | "contact_support"
  | "contactless"
  | "contacts"
  | "content_copy"
  | "content_cut"
  | "content_paste"
  | "content_paste_off"
  | "control_camera"
  | "control_point"
  | "control_point_duplicate"
  | "copy"
  | "copy_all"
  | "copyright"
  | "coronavirus"
  | "corporate_fare"
  | "cottage"
  | "countertops"
  | "create"
  | "create_new_folder"
  | "credit_card"
  | "credit_card_off"
  | "credit_score"
  | "crib"
  | "crop"
  | "crop_16_9"
  | "crop_3_2"
  | "crop_5_4"
  | "crop_7_5"
  | "crop_din"
  | "crop_free"
  | "crop_landscape"
  | "crop_original"
  | "crop_portrait"
  | "crop_rotate"
  | "crop_square"
  | "cut"
  | "dangerous"
  | "dark_mode"
  | "dashboard"
  | "dashboard_customize"
  | "data_saver_off"
  | "data_saver_on"
  | "data_usage"
  | "date_range"
  | "deck"
  | "dehaze"
  | "delete"
  | "delete_forever"
  | "delete_outline"
  | "delete_sweep"
  | "delivery_dining"
  | "departure_board"
  | "description"
  | "design_services"
  | "desktop_access_disabled"
  | "desktop_mac"
  | "desktop_windows"
  | "details"
  | "developer_board"
  | "developer_board_off"
  | "developer_mode"
  | "device_hub"
  | "device_thermostat"
  | "device_unknown"
  | "devices"
  | "devices_other"
  | "dialer_sip"
  | "dialpad"
  | "dining"
  | "dinner_dining"
  | "directions"
  | "directions_bike"
  | "directions_boat"
  | "directions_boat_filled"
  | "directions_bus"
  | "directions_bus_filled"
  | "directions_car"
  | "directions_car_filled"
  | "directions_ferry"
  | "directions_off"
  | "directions_railway_filled"
  | "directions_run"
  | "directions_railway"
  | "directions_subway"
  | "directions_subway_filled"
  | "directions_train"
  | "directions_transit"
  | "directions_transit_filled"
  | "directions_walk"
  | "dirty_lens"
  | "disabled_by_default"
  | "disc_full"
  | "dnd_forwardslash"
  | "dns"
  | "do_disturb"
  | "do_disturb_alt"
  | "do_disturb_off"
  | "do_disturb_on"
  | "do_not_disturb"
  | "do_not_disturb_alt"
  | "do_not_disturb_off"
  | "do_not_disturb_on"
  | "do_not_disturb_on_total_silence"
  | "do_not_step"
  | "do_not_touch"
  | "dock"
  | "document_scanner"
  | "domain"
  | "domain_disabled"
  | "domain_verification"
  | "done"
  | "done_all"
  | "done_outline"
  | "donut_large"
  | "donut_small"
  | "door_back"
  | "door_front"
  | "door_sliding"
  | "doorbell"
  | "double_arrow"
  | "downhill_skiing"
  | "download"
  | "download_done"
  | "download_for_offline"
  | "downloading"
  | "drafts"
  | "drag_handle"
  | "drag_indicator"
  | "drive_eta"
  | "drive_file_move"
  | "drive_file_move_outline"
  | "drive_file_rename_outline"
  | "drive_folder_upload"
  | "dry"
  | "dry_cleaning"
  | "duo"
  | "dvr"
  | "dynamic_feed"
  | "dynamic_form"
  | "e_mobiledata"
  | "earbuds"
  | "earbuds_battery"
  | "east"
  | "eco"
  | "edgesensor_high"
  | "edgesensor_low"
  | "edit"
  | "edit_attributes"
  | "edit_location"
  | "edit_location_alt"
  | "edit_notifications"
  | "edit_off"
  | "edit_road"
  | "eight_k"
  | "eight_k_plus"
  | "eight_mp"
  | "eighteen_mp"
  | "eject"
  | "elderly"
  | "electric_bike"
  | "electric_car"
  | "electric_moped"
  | "electric_rickshaw"
  | "electric_scooter"
  | "electrical_services"
  | "elevator"
  | "eleven_mp"
  | "email"
  | "emoji_emotions"
  | "emoji_events"
  | "emoji_flags"
  | "emoji_food_beverage"
  | "emoji_nature"
  | "emoji_objects"
  | "emoji_people"
  | "emoji_symbols"
  | "emoji_transportation"
  | "engineering"
  | "enhance_photo_translate"
  | "enhanced_encryption"
  | "equalizer"
  | "error"
  | "error_outline"
  | "escalator"
  | "escalator_warning"
  | "euro"
  | "euro_symbol"
  | "ev_station"
  | "event"
  | "event_available"
  | "event_busy"
  | "event_note"
  | "event_seat"
  | "exit_to_app"
  | "expand"
  | "expand_less"
  | "expand_more"
  | "explicit"
  | "explore"
  | "explore_off"
  | "exposure"
  | "exposure_minus_1"
  | "exposure_minus_2"
  | "exposure_neg_1"
  | "exposure_neg_2"
  | "exposure_plus_1"
  | "exposure_plus_2"
  | "exposure_zero"
  | "extension"
  | "extension_off"
  | "face"
  | "face_retouching_off"
  | "face_retouching_natural"
  | "facebook"
  | "fact_check"
  | "family_restroom"
  | "fast_forward"
  | "fast_rewind"
  | "fastfood"
  | "favorite"
  | "favorite_border"
  | "favorite_outline"
  | "featured_play_list"
  | "featured_video"
  | "feed"
  | "feedback"
  | "female"
  | "fence"
  | "festival"
  | "fiber_dvr"
  | "fiber_manual_record"
  | "fiber_new"
  | "fiber_pin"
  | "fiber_smart_record"
  | "fifteen_mp"
  | "file_copy"
  | "file_download"
  | "file_download_done"
  | "file_download_off"
  | "file_present"
  | "file_upload"
  | "filter"
  | "filter_1"
  | "filter_2"
  | "filter_3"
  | "filter_4"
  | "filter_5"
  | "filter_6"
  | "filter_7"
  | "filter_8"
  | "filter_9"
  | "filter_9_plus"
  | "filter_alt"
  | "filter_b_and_w"
  | "filter_center_focus"
  | "filter_drama"
  | "filter_frames"
  | "filter_hdr"
  | "filter_list"
  | "filter_list_alt"
  | "filter_none"
  | "filter_tilt_shift"
  | "filter_vintage"
  | "find_in_page"
  | "find_replace"
  | "fingerprint"
  | "fire_extinguisher"
  | "fire_hydrant"
  | "fireplace"
  | "first_page"
  | "fit_screen"
  | "fitness_center"
  | "five_g"
  | "five_k"
  | "five_k_plus"
  | "five_mp"
  | "flag"
  | "flaky"
  | "flare"
  | "flash_auto"
  | "flash_off"
  | "flash_on"
  | "flashlight_off"
  | "flashlight_on"
  | "flatware"
  | "flight"
  | "flight_land"
  | "flight_takeoff"
  | "flip"
  | "flip_camera_android"
  | "flip_camera_ios"
  | "flip_to_back"
  | "flip_to_front"
  | "flourescent"
  | "flutter_dash"
  | "fmd_bad"
  | "fmd_good"
  | "folder"
  | "folder_open"
  | "folder_shared"
  | "folder_special"
  | "follow_the_signs"
  | "font_download"
  | "font_download_off"
  | "food_bank"
  | "format_align_center"
  | "format_align_justify"
  | "format_align_left"
  | "format_align_right"
  | "format_bold"
  | "format_clear"
  | "format_color_fill"
  | "format_color_reset"
  | "format_color_text"
  | "format_indent_decrease"
  | "format_indent_increase"
  | "format_italic"
  | "format_line_spacing"
  | "format_list_bulleted"
  | "format_list_numbered"
  | "format_list_numbered_rtl"
  | "format_paint"
  | "format_quote"
  | "format_shapes"
  | "format_size"
  | "format_strikethrough"
  | "format_textdirection_l_to_r"
  | "format_textdirection_r_to_l"
  | "format_underline"
  | "format_underlined"
  | "forum"
  | "forward"
  | "forward_10"
  | "forward_30"
  | "forward_5"
  | "forward_to_inbox"
  | "foundation"
  | "four_g_mobiledata"
  | "four_g_plus_mobiledata"
  | "four_k"
  | "four_k_plus"
  | "four_mp"
  | "fourteen_mp"
  | "free_breakfast"
  | "fullscreen"
  | "fullscreen_exit"
  | "functions"
  | "g_mobiledata"
  | "g_translate"
  | "gamepad"
  | "games"
  | "garage"
  | "gavel"
  | "gesture"
  | "get_app"
  | "gif"
  | "gite"
  | "golf_course"
  | "gpp_bad"
  | "gpp_good"
  | "gpp_maybe"
  | "gps_fixed"
  | "gps_not_fixed"
  | "gps_off"
  | "grade"
  | "gradient"
  | "grading"
  | "grain"
  | "graphic_eq"
  | "grass"
  | "grid_3x3"
  | "grid_4x4"
  | "grid_goldenratio"
  | "grid_off"
  | "grid_on"
  | "grid_view"
  | "group"
  | "group_add"
  | "group_work"
  | "groups"
  | "h_mobiledata"
  | "h_plus_mobiledata"
  | "hail"
  | "handyman"
  | "hardware"
  | "hd"
  | "hdr_auto"
  | "hdr_auto_select"
  | "hdr_enhanced_select"
  | "hdr_off"
  | "hdr_off_select"
  | "hdr_on"
  | "hdr_on_select"
  | "hdr_plus"
  | "hdr_strong"
  | "hdr_weak"
  | "headphones"
  | "headphones_battery"
  | "headset"
  | "headset_mic"
  | "headset_off"
  | "healing"
  | "health_and_safety"
  | "hearing"
  | "hearing_disabled"
  | "height"
  | "help"
  | "help_center"
  | "help_outline"
  | "hevc"
  | "hide_image"
  | "hide_source"
  | "high_quality"
  | "highlight"
  | "highlight_alt"
  | "highlight_off"
  | "highlight_remove"
  | "hiking"
  | "history"
  | "history_edu"
  | "history_toggle_off"
  | "holiday_village"
  | "home"
  | "home_filled"
  | "home_max"
  | "home_mini"
  | "home_repair_service"
  | "home_work"
  | "horizontal_distribute"
  | "horizontal_rule"
  | "horizontal_split"
  | "hot_tub"
  | "hotel"
  | "hourglass_bottom"
  | "hourglass_disabled"
  | "hourglass_empty"
  | "hourglass_full"
  | "hourglass_top"
  | "house"
  | "house_siding"
  | "houseboat"
  | "how_to_reg"
  | "how_to_vote"
  | "http"
  | "https"
  | "hvac"
  | "ice_skating"
  | "icecream"
  | "image"
  | "image_aspect_ratio"
  | "image_not_supported"
  | "image_search"
  | "imagesearch_roller"
  | "import_contacts"
  | "import_export"
  | "important_devices"
  | "inbox"
  | "indeterminate_check_box"
  | "info"
  | "info_outline"
  | "input"
  | "insert_chart"
  | "insert_comment"
  | "insert_drive_file"
  | "insert_emoticon"
  | "insert_invitation"
  | "insert_link"
  | "insert_photo"
  | "insights"
  | "integration_instructions"
  | "inventory"
  | "inventory_2"
  | "invert_colors"
  | "invert_colors_off"
  | "invert_colors_on"
  | "ios_share"
  | "iron"
  | "iso"
  | "kayaking"
  | "keyboard"
  | "keyboard_alt"
  | "keyboard_arrow_down"
  | "keyboard_arrow_left"
  | "keyboard_arrow_right"
  | "keyboard_arrow_up"
  | "keyboard_backspace"
  | "keyboard_capslock"
  | "keyboard_control"
  | "keyboard_hide"
  | "keyboard_return"
  | "keyboard_tab"
  | "keyboard_voice"
  | "king_bed"
  | "kitchen"
  | "kitesurfing"
  | "label"
  | "label_important"
  | "label_important_outline"
  | "label_off"
  | "label_outline"
  | "landscape"
  | "language"
  | "laptop"
  | "laptop_chromebook"
  | "laptop_mac"
  | "laptop_windows"
  | "last_page"
  | "launch"
  | "layers"
  | "layers_clear"
  | "leaderboard"
  | "leak_add"
  | "leak_remove"
  | "leave_bags_at_home"
  | "legend_toggle"
  | "lens"
  | "lens_blur"
  | "library_add"
  | "library_add_check"
  | "library_books"
  | "library_music"
  | "light"
  | "light_mode"
  | "lightbulb"
  | "lightbulb_outline"
  | "line_style"
  | "line_weight"
  | "linear_scale"
  | "link"
  | "link_off"
  | "linked_camera"
  | "liquor"
  | "list"
  | "list_alt"
  | "live_help"
  | "live_tv"
  | "living"
  | "local_activity"
  | "local_airport"
  | "local_atm"
  | "local_attraction"
  | "local_bar"
  | "local_cafe"
  | "local_car_wash"
  | "local_convenience_store"
  | "local_dining"
  | "local_drink"
  | "local_fire_department"
  | "local_florist"
  | "local_gas_station"
  | "local_grocery_store"
  | "local_hospital"
  | "local_hotel"
  | "local_laundry_service"
  | "local_library"
  | "local_mall"
  | "local_movies"
  | "local_offer"
  | "local_parking"
  | "local_pharmacy"
  | "local_phone"
  | "local_pizza"
  | "local_play"
  | "local_police"
  | "local_post_office"
  | "local_print_shop"
  | "local_printshop"
  | "local_restaurant"
  | "local_see"
  | "local_shipping"
  | "local_taxi"
  | "location_city"
  | "location_disabled"
  | "location_history"
  | "location_off"
  | "location_on"
  | "location_pin"
  | "location_searching"
  | "lock"
  | "lock_clock"
  | "lock_open"
  | "lock_outline"
  | "login"
  | "logout"
  | "looks"
  | "looks_3"
  | "looks_4"
  | "looks_5"
  | "looks_6"
  | "looks_one"
  | "looks_two"
  | "loop"
  | "loupe"
  | "low_priority"
  | "loyalty"
  | "lte_mobiledata"
  | "lte_plus_mobiledata"
  | "luggage"
  | "lunch_dining"
  | "mail"
  | "mail_outline"
  | "male"
  | "manage_accounts"
  | "manage_search"
  | "map"
  | "maps_home_work"
  | "maps_ugc"
  | "margin"
  | "mark_as_unread"
  | "mark_chat_read"
  | "mark_chat_unread"
  | "mark_email_read"
  | "mark_email_unread"
  | "markunread"
  | "markunread_mailbox"
  | "masks"
  | "maximize"
  | "media_bluetooth_off"
  | "media_bluetooth_on"
  | "mediation"
  | "medical_services"
  | "medication"
  | "meeting_room"
  | "memory"
  | "menu"
  | "menu_book"
  | "menu_open"
  | "merge_type"
  | "message"
  | "messenger"
  | "messenger_outline"
  | "mic"
  | "mic_external_off"
  | "mic_external_on"
  | "mic_none"
  | "mic_off"
  | "microwave"
  | "military_tech"
  | "minimize"
  | "miscellaneous_services"
  | "missed_video_call"
  | "mms"
  | "mobile_friendly"
  | "mobile_off"
  | "mobile_screen_share"
  | "mobiledata_off"
  | "mode"
  | "mode_comment"
  | "mode_edit"
  | "mode_edit_outline"
  | "mode_night"
  | "mode_standby"
  | "model_training"
  | "monetization_on"
  | "money"
  | "money_off"
  | "money_off_csred"
  | "monitor"
  | "monitor_weight"
  | "monochrome_photos"
  | "mood"
  | "mood_bad"
  | "moped"
  | "more"
  | "more_horiz"
  | "more_time"
  | "more_vert"
  | "motion_photos_auto"
  | "motion_photos_off"
  | "motion_photos_on"
  | "motion_photos_pause"
  | "motion_photos_paused"
  | "motorcycle"
  | "mouse"
  | "move_to_inbox"
  | "movie"
  | "movie_creation"
  | "movie_filter"
  | "moving"
  | "mp"
  | "multiline_chart"
  | "multiple_stop"
  | "multitrack_audio"
  | "museum"
  | "music_note"
  | "music_off"
  | "music_video"
  | "my_library_add"
  | "my_library_books"
  | "my_library_music"
  | "my_location"
  | "nat"
  | "nature"
  | "nature_people"
  | "navigate_before"
  | "navigate_next"
  | "navigation"
  | "near_me"
  | "near_me_disabled"
  | "nearby_error"
  | "nearby_off"
  | "network_cell"
  | "network_check"
  | "network_locked"
  | "network_wifi"
  | "new_label"
  | "new_releases"
  | "next_plan"
  | "next_week"
  | "nfc"
  | "night_shelter"
  | "nightlife"
  | "nightlight"
  | "nightlight_round"
  | "nights_stay"
  | "nine_k"
  | "nine_k_plus"
  | "nine_mp"
  | "nineteen_mp"
  | "no_accounts"
  | "no_backpack"
  | "no_cell"
  | "no_drinks"
  | "no_encryption"
  | "no_encryption_gmailerrorred"
  | "no_flash"
  | "no_food"
  | "no_luggage"
  | "no_meals"
  | "no_meals_ouline"
  | "no_meeting_room"
  | "no_photography"
  | "no_sim"
  | "no_stroller"
  | "no_transfer"
  | "nordic_walking"
  | "north"
  | "north_east"
  | "north_west"
  | "not_accessible"
  | "not_interested"
  | "not_listed_location"
  | "not_started"
  | "note"
  | "note_add"
  | "note_alt"
  | "notes"
  | "notification_add"
  | "notification_important"
  | "notifications"
  | "notifications_active"
  | "notifications_none"
  | "notifications_off"
  | "notifications_on"
  | "notifications_paused"
  | "now_wallpaper"
  | "now_widgets"
  | "offline_bolt"
  | "offline_pin"
  | "offline_share"
  | "ondemand_video"
  | "one_k"
  | "one_k_plus"
  | "one_x_mobiledata"
  | "online_prediction"
  | "opacity"
  | "open_in_browser"
  | "open_in_full"
  | "open_in_new"
  | "open_in_new_off"
  | "open_with"
  | "other_houses"
  | "outbond"
  | "outbound"
  | "outbox"
  | "outdoor_grill"
  | "outgoing_mail"
  | "outlet"
  | "outlined_flag"
  | "padding"
  | "pages"
  | "pageview"
  | "paid"
  | "palette"
  | "pan_tool"
  | "panorama"
  | "panorama_fish_eye"
  | "panorama_fisheye"
  | "panorama_horizontal"
  | "panorama_horizontal_select"
  | "panorama_photosphere"
  | "panorama_photosphere_select"
  | "panorama_vertical"
  | "panorama_vertical_select"
  | "panorama_wide_angle"
  | "panorama_wide_angle_select"
  | "paragliding"
  | "park"
  | "party_mode"
  | "password"
  | "paste"
  | "pattern"
  | "pause"
  | "pause_circle"
  | "pause_circle_filled"
  | "pause_circle_outline"
  | "pause_presentation"
  | "payment"
  | "payments"
  | "pedal_bike"
  | "pending"
  | "pending_actions"
  | "people"
  | "people_alt"
  | "people_outline"
  | "perm_camera_mic"
  | "perm_contact_cal"
  | "perm_contact_calendar"
  | "perm_data_setting"
  | "perm_device_info"
  | "perm_device_information"
  | "perm_identity"
  | "perm_media"
  | "perm_phone_msg"
  | "perm_scan_wifi"
  | "person"
  | "person_add"
  | "person_add_alt"
  | "person_add_alt_1"
  | "person_add_disabled"
  | "person_off"
  | "person_outline"
  | "person_pin"
  | "person_pin_circle"
  | "person_remove"
  | "person_remove_alt_1"
  | "person_search"
  | "personal_injury"
  | "personal_video"
  | "pest_control"
  | "pest_control_rodent"
  | "pets"
  | "phone"
  | "phone_android"
  | "phone_bluetooth_speaker"
  | "phone_callback"
  | "phone_disabled"
  | "phone_enabled"
  | "phone_forwarded"
  | "phone_in_talk"
  | "phone_iphone"
  | "phone_locked"
  | "phone_missed"
  | "phone_paused"
  | "phonelink"
  | "phonelink_erase"
  | "phonelink_lock"
  | "phonelink_off"
  | "phonelink_ring"
  | "phonelink_setup"
  | "photo"
  | "photo_album"
  | "photo_camera"
  | "photo_camera_back"
  | "photo_camera_front"
  | "photo_filter"
  | "photo_library"
  | "photo_size_select_actual"
  | "photo_size_select_large"
  | "photo_size_select_small"
  | "piano"
  | "piano_off"
  | "picture_as_pdf"
  | "picture_in_picture"
  | "picture_in_picture_alt"
  | "pie_chart"
  | "pie_chart_outline"
  | "pin"
  | "pin_drop"
  | "pivot_table_chart"
  | "place"
  | "plagiarism"
  | "play_arrow"
  | "play_circle"
  | "play_circle_fill"
  | "play_circle_filled"
  | "play_circle_outline"
  | "play_disabled"
  | "play_for_work"
  | "play_lesson"
  | "playlist_add"
  | "playlist_add_check"
  | "playlist_play"
  | "plumbing"
  | "plus_one"
  | "podcasts"
  | "point_of_sale"
  | "policy"
  | "poll"
  | "polymer"
  | "pool"
  | "portable_wifi_off"
  | "portrait"
  | "post_add"
  | "power"
  | "power_input"
  | "power_off"
  | "power_settings_new"
  | "precision_manufacturing"
  | "pregnant_woman"
  | "present_to_all"
  | "preview"
  | "price_change"
  | "price_check"
  | "print"
  | "print_disabled"
  | "priority_high"
  | "privacy_tip"
  | "production_quantity_limits"
  | "psychology"
  | "public"
  | "public_off"
  | "publish"
  | "published_with_changes"
  | "push_pin"
  | "qr_code"
  | "qr_code_2"
  | "qr_code_scanner"
  | "query_builder"
  | "query_stats"
  | "question_answer"
  | "queue"
  | "queue_music"
  | "queue_play_next"
  | "quick_contacts_dialer"
  | "quick_contacts_mail"
  | "quickreply"
  | "quiz"
  | "r_mobiledata"
  | "radar"
  | "radio"
  | "radio_button_checked"
  | "radio_button_off"
  | "radio_button_on"
  | "radio_button_unchecked"
  | "railway_alert"
  | "ramen_dining"
  | "rate_review"
  | "raw_off"
  | "raw_on"
  | "read_more"
  | "real_estate_agent"
  | "receipt"
  | "receipt_long"
  | "recent_actors"
  | "recommend"
  | "record_voice_over"
  | "redeem"
  | "redo"
  | "reduce_capacity"
  | "refresh"
  | "remember_me"
  | "remove"
  | "remove_circle"
  | "remove_circle_outline"
  | "remove_done"
  | "remove_from_queue"
  | "remove_moderator"
  | "remove_red_eye"
  | "remove_shopping_cart"
  | "reorder"
  | "repeat"
  | "repeat_on"
  | "repeat_one"
  | "repeat_one_on"
  | "replay"
  | "replay_10"
  | "replay_30"
  | "replay_5"
  | "replay_circle_filled"
  | "reply"
  | "reply_all"
  | "report"
  | "report_gmailerrorred"
  | "report_off"
  | "report_problem"
  | "request_page"
  | "request_quote"
  | "reset_tv"
  | "restart_alt"
  | "restaurant"
  | "restaurant_menu"
  | "restore"
  | "restore_from_trash"
  | "restore_page"
  | "reviews"
  | "rice_bowl"
  | "ring_volume"
  | "roofing"
  | "room"
  | "room_preferences"
  | "room_service"
  | "rotate_90_degrees_ccw"
  | "rotate_left"
  | "rotate_right"
  | "rounded_corner"
  | "router"
  | "rowing"
  | "rss_feed"
  | "rsvp"
  | "rtt"
  | "rule"
  | "rule_folder"
  | "run_circle"
  | "running_with_errors"
  | "rv_hookup"
  | "safety_divider"
  | "sailing"
  | "sanitizer"
  | "satellite"
  | "save"
  | "save_alt"
  | "saved_search"
  | "savings"
  | "scanner"
  | "scatter_plot"
  | "schedule"
  | "schedule_send"
  | "schema"
  | "school"
  | "science"
  | "score"
  | "screen_lock_landscape"
  | "screen_lock_portrait"
  | "screen_lock_rotation"
  | "screen_rotation"
  | "screen_search_desktop"
  | "screen_share"
  | "screenshot"
  | "sd"
  | "sd_card"
  | "sd_card_alert"
  | "sd_storage"
  | "search"
  | "search_off"
  | "security"
  | "security_update"
  | "security_update_good"
  | "security_update_warning"
  | "segment"
  | "select_all"
  | "self_improvement"
  | "sell"
  | "send"
  | "send_and_archive"
  | "send_to_mobile"
  | "sensor_door"
  | "sensor_window"
  | "sensors"
  | "sensors_off"
  | "sentiment_dissatisfied"
  | "sentiment_neutral"
  | "sentiment_satisfied"
  | "sentiment_satisfied_alt"
  | "sentiment_very_dissatisfied"
  | "sentiment_very_satisfied"
  | "set_meal"
  | "settings"
  | "settings_accessibility"
  | "settings_applications"
  | "settings_backup_restore"
  | "settings_bluetooth"
  | "settings_brightness"
  | "settings_cell"
  | "settings_display"
  | "settings_ethernet"
  | "settings_input_antenna"
  | "settings_input_component"
  | "settings_input_composite"
  | "settings_input_hdmi"
  | "settings_input_svideo"
  | "settings_overscan"
  | "settings_phone"
  | "settings_power"
  | "settings_remote"
  | "settings_suggest"
  | "settings_system_daydream"
  | "settings_voice"
  | "seven_k"
  | "seven_k_plus"
  | "seven_mp"
  | "seventeen_mp"
  | "share"
  | "share_arrival_time"
  | "share_location"
  | "shield"
  | "shop"
  | "shop_2"
  | "shop_two"
  | "shopping_bag"
  | "shopping_basket"
  | "shopping_cart"
  | "short_text"
  | "shortcut"
  | "show_chart"
  | "shower"
  | "shuffle"
  | "shuffle_on"
  | "shutter_speed"
  | "sick"
  | "signal_cellular_0_bar"
  | "signal_cellular_4_bar"
  | "signal_cellular_alt"
  | "signal_cellular_connected_no_internet_0_bar"
  | "signal_cellular_connected_no_internet_4_bar"
  | "signal_cellular_no_sim"
  | "signal_cellular_nodata"
  | "signal_cellular_null"
  | "signal_cellular_off"
  | "signal_wifi_0_bar"
  | "signal_wifi_4_bar"
  | "signal_wifi_4_bar_lock"
  | "signal_wifi_bad"
  | "signal_wifi_connected_no_internet_4"
  | "signal_wifi_off"
  | "signal_wifi_statusbar_4_bar"
  | "signal_wifi_statusbar_connected_no_internet_4"
  | "signal_wifi_statusbar_null"
  | "sim_card"
  | "sim_card_alert"
  | "sim_card_download"
  | "single_bed"
  | "sip"
  | "six_ft_apart"
  | "six_k"
  | "six_k_plus"
  | "six_mp"
  | "sixteen_mp"
  | "sixty_fps"
  | "sixty_fps_select"
  | "skateboarding"
  | "skip_next"
  | "skip_previous"
  | "sledding"
  | "slideshow"
  | "slow_motion_video"
  | "smart_button"
  | "smart_display"
  | "smart_screen"
  | "smart_toy"
  | "smartphone"
  | "smoke_free"
  | "smoking_rooms"
  | "sms"
  | "sms_failed"
  | "snippet_folder"
  | "snooze"
  | "snowboarding"
  | "snowmobile"
  | "snowshoeing"
  | "soap"
  | "social_distance"
  | "sort"
  | "sort_by_alpha"
  | "source"
  | "south"
  | "south_east"
  | "south_west"
  | "spa"
  | "space_bar"
  | "space_dashboard"
  | "speaker"
  | "speaker_group"
  | "speaker_notes"
  | "speaker_notes_off"
  | "speaker_phone"
  | "speed"
  | "spellcheck"
  | "splitscreen"
  | "sports"
  | "sports_bar"
  | "sports_baseball"
  | "sports_basketball"
  | "sports_cricket"
  | "sports_esports"
  | "sports_football"
  | "sports_golf"
  | "sports_handball"
  | "sports_hockey"
  | "sports_kabaddi"
  | "sports_mma"
  | "sports_motorsports"
  | "sports_rugby"
  | "sports_score"
  | "sports_soccer"
  | "sports_tennis"
  | "sports_volleyball"
  | "square_foot"
  | "stacked_bar_chart"
  | "stacked_line_chart"
  | "stairs"
  | "star"
  | "star_border"
  | "star_border_purple500"
  | "star_half"
  | "star_outline"
  | "star_purple500"
  | "star_rate"
  | "stars"
  | "stay_current_landscape"
  | "stay_current_portrait"
  | "stay_primary_landscape"
  | "stay_primary_portrait"
  | "sticky_note_2"
  | "stop"
  | "stop_circle"
  | "stop_screen_share"
  | "storage"
  | "store"
  | "store_mall_directory"
  | "storefront"
  | "storm"
  | "straighten"
  | "stream"
  | "streetview"
  | "strikethrough_s"
  | "stroller"
  | "style"
  | "subdirectory_arrow_left"
  | "subdirectory_arrow_right"
  | "subject"
  | "subscript"
  | "subscriptions"
  | "subtitles"
  | "subtitles_off"
  | "subway"
  | "summarize"
  | "superscript"
  | "supervised_user_circle"
  | "supervisor_account"
  | "support"
  | "support_agent"
  | "surfing"
  | "surround_sound"
  | "swap_calls"
  | "swap_horiz"
  | "swap_horizontal_circle"
  | "swap_vert"
  | "swap_vert_circle"
  | "swap_vertical_circle"
  | "swipe"
  | "switch_account"
  | "switch_camera"
  | "switch_left"
  | "switch_right"
  | "switch_video"
  | "sync"
  | "sync_alt"
  | "sync_disabled"
  | "sync_problem"
  | "system_security_update"
  | "system_security_update_good"
  | "system_security_update_warning"
  | "system_update"
  | "system_update_alt"
  | "system_update_tv"
  | "tab"
  | "tab_unselected"
  | "table_chart"
  | "table_rows"
  | "table_view"
  | "tablet"
  | "tablet_android"
  | "tablet_mac"
  | "tag"
  | "tag_faces"
  | "takeout_dining"
  | "tap_and_play"
  | "tapas"
  | "task"
  | "task_alt"
  | "taxi_alert"
  | "ten_k"
  | "ten_mp"
  | "terrain"
  | "text_fields"
  | "text_format"
  | "text_rotate_up"
  | "text_rotate_vertical"
  | "text_rotation_angledown"
  | "text_rotation_angleup"
  | "text_rotation_down"
  | "text_rotation_none"
  | "text_snippet"
  | "textsms"
  | "texture"
  | "theater_comedy"
  | "theaters"
  | "thermostat"
  | "thermostat_auto"
  | "thirteen_mp"
  | "thirty_fps"
  | "thirty_fps_select"
  | "three_g_mobiledata"
  | "three_k"
  | "three_k_plus"
  | "three_mp"
  | "three_p"
  | "threed_rotation"
  | "threesixty"
  | "thumb_down"
  | "thumb_down_alt"
  | "thumb_down_off_alt"
  | "thumb_up"
  | "thumb_up_alt"
  | "thumb_up_off_alt"
  | "thumbs_up_down"
  | "time_to_leave"
  | "timelapse"
  | "timeline"
  | "timer"
  | "timer_10"
  | "timer_10_select"
  | "timer_3"
  | "timer_3_select"
  | "timer_off"
  | "title"
  | "toc"
  | "today"
  | "toggle_off"
  | "toggle_on"
  | "toll"
  | "tonality"
  | "topic"
  | "touch_app"
  | "tour"
  | "toys"
  | "track_changes"
  | "traffic"
  | "train"
  | "tram"
  | "transfer_within_a_station"
  | "transform"
  | "transgender"
  | "transit_enterexit"
  | "translate"
  | "travel_explore"
  | "trending_down"
  | "trending_flat"
  | "trending_neutral"
  | "trending_up"
  | "trip_origin"
  | "try_sms_star"
  | "tty"
  | "tune"
  | "tungsten"
  | "turned_in"
  | "turned_in_not"
  | "tv"
  | "tv_off"
  | "twelve_mp"
  | "twenty_four_mp"
  | "twenty_mp"
  | "twenty_one_mp"
  | "twenty_three_mp"
  | "twenty_two_mp"
  | "two_k"
  | "two_k_plus"
  | "two_mp"
  | "two_wheeler"
  | "umbrella"
  | "unarchive"
  | "undo"
  | "unfold_less"
  | "unfold_more"
  | "unpublished"
  | "unsubscribe"
  | "upcoming"
  | "update"
  | "update_disabled"
  | "upgrade"
  | "upload"
  | "upload_file"
  | "usb"
  | "usb_off"
  | "verified"
  | "verified_user"
  | "vertical_align_bottom"
  | "vertical_align_center"
  | "vertical_align_top"
  | "vertical_distribute"
  | "vertical_split"
  | "vibration"
  | "video_call"
  | "video_camera_back"
  | "video_camera_front"
  | "video_collection"
  | "video_label"
  | "video_library"
  | "video_settings"
  | "video_stable"
  | "videocam"
  | "videocam_off"
  | "videogame_asset"
  | "videogame_asset_off"
  | "view_agenda"
  | "view_array"
  | "view_carousel"
  | "view_column"
  | "view_comfortable"
  | "view_comfy"
  | "view_compact"
  | "view_day"
  | "view_headline"
  | "view_in_ar"
  | "view_list"
  | "view_module"
  | "view_quilt"
  | "view_sidebar"
  | "view_stream"
  | "view_week"
  | "vignette"
  | "villa"
  | "visibility"
  | "visibility_off"
  | "voice_chat"
  | "voice_over_off"
  | "voicemail"
  | "volume_down"
  | "volume_mute"
  | "volume_off"
  | "volume_up"
  | "volunteer_activism"
  | "vpn_key"
  | "vpn_lock"
  | "vrpano"
  | "wallet_giftcard"
  | "wallet_membership"
  | "wallet_travel"
  | "wallpaper"
  | "warning"
  | "warning_amber"
  | "wash"
  | "watch"
  | "watch_later"
  | "water"
  | "water_damage"
  | "waterfall_chart"
  | "waves"
  | "wb_auto"
  | "wb_cloudy"
  | "wb_incandescent"
  | "wb_iridescent"
  | "wb_shade"
  | "wb_sunny"
  | "wb_twighlight"
  | "wb_twilight"
  | "wc"
  | "web"
  | "web_asset"
  | "web_asset_off"
  | "web_stories"
  | "weekend"
  | "west"
  | "whatshot"
  | "wheelchair_pickup"
  | "where_to_vote"
  | "widgets"
  | "wifi"
  | "wifi_calling"
  | "wifi_calling_3"
  | "wifi_lock"
  | "wifi_off"
  | "wifi_protected_setup"
  | "wifi_tethering"
  | "wifi_tethering_off"
  | "window"
  | "wine_bar"
  | "work"
  | "work_off"
  | "work_outline"
  | "workspaces"
  | "workspaces_filled"
  | "workspaces_outline"
  | "wrap_text"
  | "wrong_location"
  | "wysiwyg"
  | "yard"
  | "youtube_searched_for"
  | "zoom_in"
  | "zoom_out"
  | "zoom_out_map"
  | "zoom_out_outlined";
/**
 * The direction of the component (horizontal/vertical)
 */
export type Direction = "horizontal" | "vertical";
/**
 * Color type
 */
export type Color1 = number;
/**
 * The visual density of UI components.
 */
export type VisualDensity = "comfortable" | "compact" | "standard";
/**
 * Element of type MaterialTapTargetSize
 */
export type MaterialTapTargetSize = "shrinkWrap" | "padded";
/**
 * The alignment to use.
 */
export type Alignment =
  | "bottomCenter"
  | "bottomLeft"
  | "bottomRight"
  | "center"
  | "centerLeft"
  | "centerRight"
  | "topCenter"
  | "topLeft"
  | "topRight";
/**
 * The BoxShape enum, used to define the shape of a box.
 */
export type BoxShape = "circle" | "rectangle";
/**
 * In which direction the elements should be placed following the horizontal axis.
 */
export type TextDirection = "ltr" | "rtl";
/**
 * How the objects should be aligned following the vertical axis.
 */
export type VerticalDirection = "down" | "up";
/**
 * A horizontal line used for aligning text.
 */
export type TextBaseline = "alphabetic" | "ideographic";
/**
 * How a flexible child is inscribed into the available space.
 */
export type FlexFit = "loose" | "tight";
/**
 * The alignment to use.
 */
export type Alignment1 =
  | "bottomCenter"
  | "bottomLeft"
  | "bottomRight"
  | "center"
  | "centerLeft"
  | "centerRight"
  | "topCenter"
  | "topLeft"
  | "topRight";
/**
 * Any component
 */
export type Component2 =
  | Actionable
  | Button
  | Carousel
  | Checkbox
  | Container
  | DropdownButton
  | Flex
  | Flexible
  | Form
  | Icon
  | Image
  | Menu
  | MenuItem
  | OverlayEntry
  | Radio
  | Slider
  | Stack
  | StatusSticker
  | Text
  | TextField
  | Toggle
  | View
  | Wrap;
/**
 * Element of type MaterialTapTargetSize
 */
export type MaterialTapTargetSize1 = "shrinkWrap" | "padded";
/**
 * Color type
 */
export type Color2 = number;
/**
 * Color type
 */
export type Color3 = number;
/**
 * Color type
 */
export type Color4 = number;
/**
 * Color type
 */
export type Color5 = number;
/**
 * The StackFit enum.
 */
export type StackFit = "expand" | "loose" | "passthrough";
/**
 * Color type
 */
export type Color6 = number;
/**
 * Allows you to underline, overline or strike out the text.
 */
export type TextDecoration = "lineThrough" | "overline" | "underline" | "none";
/**
 * Color type
 */
export type Color7 = number;
/**
 * The style in which to draw a text decoration.
 */
export type TextDecorationStyle = "dashed" | "dotted" | "double" | "solid" | "wavy";
/**
 * A horizontal line used for aligning text.
 */
export type TextBaseline1 = "alphabetic" | "ideographic";
/**
 * The type of this text input to provide autofill hints.
 */
export type AutofillHints = (
  | "addressCity"
  | "addressCityAndState"
  | "addressState"
  | "birthday"
  | "birthdayDay"
  | "birthdayMonth"
  | "birthdayYear"
  | "countryCode"
  | "countryName"
  | "creditCardExpirationDate"
  | "creditCardExpirationDay"
  | "creditCardExpirationMonth"
  | "creditCardExpirationYear"
  | "creditCardFamilyName"
  | "creditCardGivenName"
  | "creditCardMiddleName"
  | "creditCardName"
  | "creditCardNumber"
  | "creditCardSecurityCode"
  | "creditCardType"
  | "email"
  | "familyName"
  | "fullStreetAddress"
  | "gender"
  | "givenName"
  | "impp"
  | "jobTitle"
  | "language"
  | "location"
  | "middleInitial"
  | "middleName"
  | "name"
  | "namePrefix"
  | "nameSuffix"
  | "newPassword"
  | "newUsername"
  | "nickname"
  | "oneTimeCode"
  | "organizationName"
  | "password"
  | "photo"
  | "postalAddress"
  | "postalAddressExtended"
  | "postalAddressExtendedPostalCode"
  | "postalCode"
  | "streetAddressLevel1"
  | "streetAddressLevel2"
  | "streetAddressLevel3"
  | "streetAddressLevel4"
  | "streetAddressLine1"
  | "streetAddressLine2"
  | "streetAddressLine3"
  | "sublocality"
  | "telephoneNumber"
  | "telephoneNumberAreaCode"
  | "telephoneNumberCountryCode"
  | "telephoneNumberDevice"
  | "telephoneNumberExtension"
  | "telephoneNumberLocal"
  | "telephoneNumberLocalPrefix"
  | "telephoneNumberLocalSuffix"
  | "telephoneNumberNational"
  | "transactionAmount"
  | "transactionCurrency"
  | "url"
  | "username"
)[];
/**
 * Color type
 */
export type Color8 = number;
/**
 * Color type
 */
export type Color9 = number;
/**
 * Defines how the floating label should be displayed.
 */
export type FloatingLabelBehavior = "always" | "auto" | "never";
/**
 * Color type
 */
export type Color10 = number;
/**
 * In which direction the elements should be placed following the horizontal axis.
 */
export type TextDirection1 = "ltr" | "rtl";
/**
 * Color type
 */
export type Color11 = number;
/**
 * Color type
 */
export type Color12 = number;
/**
 * Color type
 */
export type Color13 = number;
/**
 * Color type
 */
export type Color14 = number;
/**
 * The appearance of the keyboard.
 */
export type Brightness = "dark" | "light";
/**
 * The height of the selection highlight boxes.
 */
export type BoxHeightStyle =
  | "includeLineSpacingBottom"
  | "includeLineSpacingMiddle"
  | "includeLineSpacingTop"
  | "max"
  | "strut"
  | "tight";
/**
 * The width of the selection highlight boxes.
 */
export type BoxWidthStyle = "max" | "tight";
/**
 * The TextLeadingDistribution enum.
 */
export type TextLeadingDitribution = "even" | "proportional";
/**
 * The alignment of the text.
 */
export type TextAlign = "left" | "right" | "center" | "justify" | "start" | "end";
/**
 * How the text should be aligned vertically.
 */
export type TextAlignVertical = "bottom" | "center" | "top";
/**
 * Determines the way that drag start behavior is handled.
 */
export type DragStartBehavior = "start" | "down";
/**
 * Determines how the maxLength limit should be enforced.
 */
export type MaxLengthEnforcement = "none" | "enforced" | "truncateAfterCompositionEnds";
/**
 * Configures how the platform keyboard will select an uppercase or lowercase keyboard.
 */
export type TextCapitalization = "none" | "words" | "sentences" | "characters";
/**
 * In which direction the elements should be placed following the horizontal axis.
 */
export type TextDirection2 = "ltr" | "rtl";
/**
 * The type of the action button to use for the keyboard.
 */
export type TextInputAction =
  | "continueAction"
  | "done"
  | "emergencyCall"
  | "go"
  | "join"
  | "newline"
  | "next"
  | "none"
  | "previous"
  | "route"
  | "search"
  | "send"
  | "unspecified";
/**
 * How the objects in the Wrap should be aligned on the CrossAxis.
 */
export type WrapCrossAlignment = "start" | "end" | "center";
/**
 * How the objects in the Wrap should be aligned.
 */
export type WrapAlignment = "start" | "end" | "center" | "spaceBetween" | "spaceAround" | "spaceEvenly";
/**
 * The quality of the image.
 */
export type FilterQuality = "high" | "medium" | "low" | "none";
/**
 * How the image should fit the parent box.
 */
export type BoxFit = "contain" | "cover" | "fill" | "fitHeight" | "fitWidth" | "none" | "scaleDown";
/**
 * Any component
 */
export type Component3 =
  | Actionable
  | Button
  | Carousel
  | Checkbox
  | Container
  | DropdownButton
  | Flex
  | Flexible
  | Form
  | Icon
  | Image
  | Menu
  | MenuItem
  | OverlayEntry
  | Radio
  | Slider
  | Stack
  | StatusSticker
  | Text
  | TextField
  | Toggle
  | View
  | Wrap;
/**
 * Any component
 */
export type Component4 =
  | Actionable
  | Button
  | Carousel
  | Checkbox
  | Container
  | DropdownButton
  | Flex
  | Flexible
  | Form
  | Icon
  | Image
  | Menu
  | MenuItem
  | OverlayEntry
  | Radio
  | Slider
  | Stack
  | StatusSticker
  | Text
  | TextField
  | Toggle
  | View
  | Wrap;
/**
 * How the image should be repeated accross the bounds not covered by the image.
 */
export type ImageRepeat = "noRepeat" | "repeat" | "repeatX" | "repeatY";

/**
 * Element of type Actionable
 */
export interface Actionable {
  /**
   * The identifier of the component
   */
  type: "actionable";
  child: Component1;
  onPressed?: Listener11;
  onDoublePressed?: Listener12;
  onLongPressed?: Listener13;
  onPressedCancel?: Listener14;
  onHovered?: Listener15;
  /**
   * Whether the actionable can submit a form.
   */
  submit?: boolean;
}
/**
 * Element of type Button
 */
export interface Button {
  /**
   * The identifier of the component
   */
  type: "button";
  /**
   * The value of the text inside the button
   */
  text: string;
  /**
   * The button is disabled if true
   */
  disabled?: boolean;
  size?: Size;
  mainStyle?: Style;
  onPressed?: Listener;
  leftIcon?: Icon;
  rightIcon?: Icon;
  /**
   * Whether the button is a submit button for a form.
   */
  submit?: boolean;
}
export interface Listener {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * The Icon to use
 */
export interface Icon {
  /**
   * The type of the element
   */
  type: "icon";
  /**
   * The size of the Icon
   */
  size?: number;
  color?: Color;
  /**
   * The semantic label for the Icon. This will be announced when using accessibility mode.
   */
  semanticLabel?: string;
  value: IconName;
  /**
   * The style of the Icon
   */
  style?: "filled" | "sharp" | "rounded" | "outlined";
}
/**
 * Element of type Carousel
 */
export interface Carousel {
  /**
   * The identifier of the component
   */
  type: "carousel";
  /**
   * The children
   */
  children: Component1[];
  options?: CarouselOptions;
}
/**
 * Element of type CarouselOptions
 */
export interface CarouselOptions {
  height?: number;
  enlargeCenterPage?: boolean;
  autoPlay?: boolean;
  autoPlayInterval?: Duration;
  autoPlayAnimationDuration?: Duration;
  pauseAutoPlayOnTouch?: boolean;
  aspectRatio?: number;
  initialPage?: number;
  enableInfiniteScroll?: boolean;
  reverse?: boolean;
  scrollDirection?: Direction;
  viewportFraction?: number;
  enlargeStrategy?: "scale" | "height" | "zoom";
}
/**
 * Element of type Duration
 */
export interface Duration {
  days?: number;
  hours?: number;
  minutes?: number;
  seconds?: number;
  milliseconds?: number;
  microseconds?: number;
}
/**
 * Element of type Checkbox
 */
export interface Checkbox {
  /**
   * The identifier of the component
   */
  type: "checkbox";
  /**
   * The default state of the checkbox
   */
  value: boolean;
  /**
   * Whether the checkbox can have 3 states.
   */
  tristate?: boolean;
  onPressed?: Listener;
  style?: CheckboxStyle;
  materialTapTargetSize?: MaterialTapTargetSize;
  /**
   * Whether the checkbox is focused initially.
   */
  autofocus?: boolean;
  /**
   * The name that will be used in the form.
   */
  name?: string;
}
/**
 * Element of type CheckboxStyle
 */
export interface CheckboxStyle {
  activeColor?: Color1;
  checkColor?: Color1;
  focusColor?: Color1;
  hoverColor?: Color1;
  /**
   * The splash radius.
   */
  splashRadius?: number;
  visualDensity?: VisualDensity;
  shape?: OutlinedBorder;
  side?: BorderSide;
}
/**
 * Element of type OutlinedBorder
 */
export interface OutlinedBorder {
  side?: BorderSide;
}
/**
 * Element of type BorderSide
 */
export interface BorderSide {
  /**
   * The width of the Border
   */
  width?: number;
  color?: Color1;
}
/**
 * Element of type container
 */
export interface Container {
  /**
   * The identifier of the component
   */
  type: "container";
  child?: Component1;
  alignment?: Alignment;
  border?: Border;
  padding?: Padding;
  constraints?: BoxConstraints;
  decoration?: BoxDecoration;
}
/**
 * Element of type Border
 */
export interface Border {
  top?: BorderSide;
  left?: BorderSide;
  bottom?: BorderSide;
  right?: BorderSide;
}
/**
 * Element of type Padding
 */
export interface Padding {
  top?: number;
  left?: number;
  bottom?: number;
  right?: number;
}
/**
 * Element of type BoxConstraints
 */
export interface BoxConstraints {
  /**
   * The minWidth of the constraint
   */
  minWidth?: number;
  /**
   * The maxWidth of the constraint, -1 means Infinity
   */
  maxWidth?: number;
  /**
   * The minHeight of the constraint
   */
  minHeight?: number;
  /**
   * The maxHeight of the constraint, -1 means Infinity
   */
  maxHeight?: number;
}
/**
 * Element of type BoxDecoration
 */
export interface BoxDecoration {
  borderRadius?: BorderRadius;
  boxShadow?: BoxShadow;
  color?: Color1;
  shape?: BoxShape;
}
/**
 * Element of type BorderRadius
 */
export interface BorderRadius {
  topLeft?: RadiusType;
  topRight?: RadiusType;
  bottomLeft?: RadiusType;
  bottomRight?: RadiusType;
}
export interface RadiusType {
  x?: number;
  y?: number;
}
/**
 * Element of type BoxShadow
 */
export interface BoxShadow {
  color?: Color1;
  /**
   * The blur radius
   */
  blurRadius?: number;
  /**
   * The spread radius
   */
  spreadRadius?: number;
  offset?: Offset;
}
/**
 * Element of type Offset
 */
export interface Offset {
  /**
   * The Offset along the x axis
   */
  dx?: number;
  /**
   * The Offset along the y axis
   */
  dy?: number;
}
/**
 * Element of type Dropdown Button
 */
export interface DropdownButton {
  /**
   * The identifier of the component
   */
  type: "dropdownButton";
  /**
   * The text of the dropdown button
   */
  text: string;
  /**
   * If true, the dropdown button is disabled
   */
  disabled?: boolean;
  size?: Size;
  mainStyle?: Style;
  child: Component1;
  icon?: Icon;
}
/**
 * Element of type Flex
 */
export interface Flex {
  /**
   * The identifier of the component
   */
  type: "flex";
  /**
   * The children
   */
  children: Component1[];
  direction?: Direction;
  /**
   * The alignment along the main axis
   */
  mainAxisAlignment?: "start" | "end" | "center" | "spaceBetween" | "spaceAround" | "spaceEvenly";
  /**
   * The alignment along the cross axis
   */
  crossAxisAlignment?: "start" | "end" | "center" | "stretch" | "baseline";
  /**
   * The multiplier of the base size for the minimal spacing
   */
  spacing?: number;
  /**
   * if true the flex will fill the main axis. Otherwise it will take the children size.
   */
  fillParent?: boolean;
  /**
   * If true the flex will scroll if there is too many item in the Main Axis.
   */
  scroll?: boolean;
  padding?: Padding;
  horizontalDirection?: TextDirection;
  verticalDirection?: VerticalDirection;
  textBaseline?: TextBaseline;
}
/**
 * Element of type Flexible
 */
export interface Flexible {
  /**
   * The type of the element
   */
  type: "flexible";
  /**
   * How a flexible child is inscribed into the available space.
   */
  flex?: number;
  fit?: FlexFit;
  child: Component1;
}
/**
 * Element of type Form
 */
export interface Form {
  /**
   * The type of the element
   */
  type: "form";
  child: Component1;
  onSubmit?: Listener1;
}
/**
 * Callback when the user submits the form.
 */
export interface Listener1 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * Element of type Image
 */
export interface Image {
  /**
   * The type of the element
   */
  type: "image";
  /**
   * The URL to the image. Will fetch the application's image if the URL does not start with `http(s)://`.
   */
  src: string;
  /**
   * The image width.
   */
  width?: number;
  /**
   * The image height.
   */
  height?: number;
  alignment?: Alignment1;
  centerSlice?: Rect;
  errorPlaceholder?: Component2;
  /**
   * Whether to exclude this image from semantics.
   */
  excludeFromSemantics?: boolean;
  filterQuality?: FilterQuality;
  fit?: BoxFit;
  framePlaceholder?: Component3;
  /**
   * Whether the old image (true) or nothing (false) is shown when the image provider changes.
   */
  gaplessPlayback?: boolean;
  /**
   * Whether to paint the image with anti-aliasing.
   */
  isAntiAlias?: boolean;
  loadingPlaceholder?: Component4;
  repeat?: ImageRepeat;
  /**
   * A semantic description of the image. This is used for TalkBack on Android and VoiceOver on IOS.
   */
  semanticLabel?: string;
}
/**
 * The center slice for a nine-patch image.
 */
export interface Rect {
  /**
   * The left position of the rectangle.
   */
  left?: number;
  /**
   * The top position of the rectangle.
   */
  top?: number;
  /**
   * The width of the rectangle.
   */
  width?: number;
  /**
   * The height of the rectangle.
   */
  height?: number;
}
/**
 * Element of type Menu
 */
export interface Menu {
  /**
   * The type of the element
   */
  type: "menu";
  /**
   * The menu items
   */
  children: Component1[];
}
/**
 * Element of type MenuItem
 */
export interface MenuItem {
  /**
   * The type of the element
   */
  type: "menuItem";
  /**
   * The text of the element
   */
  text: string;
  /**
   * Whether the element is selected or not.
   */
  isSelected?: boolean;
  /**
   * Whether the element should be disabled or not.
   */
  disabled?: boolean;
  icon?: Icon;
  onPressed?: Listener;
}
/**
 * Element of type OverlayEntry
 */
export interface OverlayEntry {
  /**
   * The identifier of the component
   */
  type: "overlayEntry";
  child: Component1;
  /**
   * Whether this entry must be included in the tree even if there is a fully opaque entry above it.
   */
  maintainState?: boolean;
  /**
   * Whether this entry occludes the entire overlay.
   */
  opaque?: boolean;
  /**
   * Whether this entry should be shown.
   */
  showOverlay?: boolean;
}
/**
 * Element of type Radio
 */
export interface Radio {
  /**
   * The type of the element
   */
  type: "radio";
  /**
   * Whether the radio will be selected initially.
   */
  autofocus?: boolean;
  /**
   * The value of the radio
   */
  value: string;
  /**
   * The value group of the radio
   */
  groupValue: string;
  materialTapTargetSize?: MaterialTapTargetSize1;
  onPressed?: Listener;
  /**
   * Whether the radio is allowed to go from checked to unchecked when clicking on it.
   */
  toggleable?: boolean;
  style?: RadioStyle;
  /**
   * The name that will be used in the form.
   */
  name?: string;
}
/**
 * Element of type RadioStyle
 */
export interface RadioStyle {
  activeColor?: Color2;
  focusColor?: Color3;
  hovercolor?: Color4;
  unselectedColor?: Color5;
  /**
   * The splash radius of the radio button
   */
  splashRadius?: number;
  visualDensity?: VisualDensity;
}
/**
 * Element of type Slider
 */
export interface Slider {
  /**
   * The identifier of the component
   */
  type: "slider";
  style?: SliderStyle;
  /**
   * Whether the slider should be focused initially.
   */
  autofocus?: boolean;
  /**
   * The number of divisions to show on the slider.
   */
  divisions?: number;
  /**
   * The label of the slider.
   */
  label?: string;
  /**
   * The minimum value of the slider.
   */
  min?: number;
  /**
   * The maximum value of the slider.
   */
  max?: number;
  onChanged?: Listener2;
  onChangeEnd?: Listener3;
  onChangeStart?: Listener4;
  /**
   * The current value of the slider.
   */
  value?: number;
  /**
   * The name that will be used in the form.
   */
  name?: string;
}
/**
 * Element of type SliderStyle
 */
export interface SliderStyle {
  activeColor?: Color1;
  inactiveColor?: Color1;
  thumbColor?: Color1;
}
/**
 * The callback to be invoked when the slider value changes.
 */
export interface Listener2 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * The callback to be invoked when the slider is released.
 */
export interface Listener3 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * The callback to be invoked when the slider is pressed.
 */
export interface Listener4 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * Element of type Stack
 */
export interface Stack {
  /**
   * The identifier of the component
   */
  type: "stack";
  /**
   * The children of the Stack.
   */
  children: Component1[];
  alignment?: Alignment;
  fit?: StackFit;
}
/**
 * Element of type StatusSticker
 */
export interface StatusSticker {
  /**
   * The type of the element
   */
  type: "statusSticker";
  /**
   * the status of the element
   */
  status: "success" | "warning" | "error" | "pending";
}
/**
 * Element of type Text
 */
export interface Text {
  /**
   * The type of the element
   */
  type: "text";
  /**
   * the value displayed in the element
   */
  value: string;
  style?: TextStyle;
  locale?: Locale;
  /**
   * The value to explain a different semantics
   */
  semanticsLabel?: string;
  /**
   * Whether the assistive technologies should spell out this text character by character
   */
  spellOut?: boolean;
  /**
   * The text alignment
   */
  textAlign?: "left" | "center" | "right" | "justify" | "start" | "end";
  /**
   * Additional texts to add after this text.
   */
  children?: Text[];
}
/**
 * The style of the Text.
 */
export interface TextStyle {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * Element of type locale
 */
export interface Locale {
  /**
   * The region subtag for the locale.
   */
  countryCode?: string;
  /**
   * The primary language subtag for the locale.
   */
  languageCode?: string;
  /**
   * The script subtag for the locale.
   */
  scriptCode?: string;
}
/**
 * Element of type TextField
 */
export interface TextField {
  /**
   * The type of the element
   */
  type: "textfield";
  /**
   * The value displayed inside the Textfield
   */
  value: string;
  /**
   * Whether to enable the autocorrection
   */
  autocorrect?: boolean;
  autofillHints?: AutofillHints;
  /**
   * Whether this Textfield should be focused initially.
   */
  autofocus?: boolean;
  buildCounter?: Listener5;
  style?: TextFieldStyle;
  dragStartBehavior?: DragStartBehavior;
  /**
   * Whether the text field is enabled.
   */
  enabled?: boolean;
  /**
   * Whether to enable user interface options to change the text selection.
   */
  enableInteractiveSelection?: boolean;
  /**
   * Whether the TextField is sized to fill its parent.
   */
  expands?: boolean;
  keyboardType?: TextInputType;
  /**
   * The maximum number of characters to allow in the text field.
   */
  maxLength?: number;
  maxLengthEnforcement?: MaxLengthEnforcement;
  /**
   * The maximum number of lines to show at one time.
   */
  maxLines?: number;
  /**
   * The minimum number of lines to occupy on the screen.
   */
  minLines?: number;
  /**
   * Whether to hide the text being edited.
   */
  obscureText?: boolean;
  onAppPrivateCommand?: Listener6;
  onChanged?: Listener7;
  onEditingComplete?: Listener8;
  onSubmitted?: Listener9;
  onTap?: Listener10;
  /**
   * Whether the text can be changed.
   */
  readOnly?: boolean;
  /**
   * Whether to show the cursor.
   */
  showCursor?: boolean;
  textCapitalization?: TextCapitalization;
  textDirection?: TextDirection2;
  textInputAction?: TextInputAction;
  toolbarOptions?: ToolbarOptions;
  /**
   * The name that will be used in the form.
   */
  name?: string;
}
/**
 * Callback that generates a custom counter view.
 */
export interface Listener5 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * The style of the Textfield.
 */
export interface TextFieldStyle {
  cursorColor?: Color8;
  /**
   * The height of the cursor.
   */
  cursorHeight?: number;
  cursorRadius?: Radius;
  /**
   * The width of the cursor.
   */
  cursorWidth?: number;
  decoration?: InputDecoration;
  keyboardAppearance?: Brightness;
  /**
   * The character used to obscure the text.
   */
  obscuringCharacter?: string;
  scrollPadding?: Padding2;
  selectionHeightStyle?: BoxHeightStyle;
  selectionWidthStyle?: BoxWidthStyle;
  strutStyle?: StrutStyle;
  textStyle?: TextStyle9;
  textAlign?: TextAlign;
  textAlignVertical?: TextAlignVertical;
}
/**
 * The radius of the cursor.
 */
export interface Radius {
  x?: number;
  y?: number;
}
/**
 * The decoration of the input.
 */
export interface InputDecoration {
  /**
   * Whether to align the label with the hint or not. Defaults to false.
   */
  alignLabelWithHint?: boolean;
  border?: InputBorder;
  constraints?: BoxConstraints1;
  contentPadding?: Padding1;
  counter?: {
    [k: string]: unknown;
  };
  counterStyle?: TextStyle1;
  /**
   * The text to place below the line as a character counter.
   */
  counterText?: string;
  disabledBorder?: InputBorder1;
  /**
   * Whether the input is enabled or disabled.
   */
  enabled?: boolean;
  enabledBorder?: InputBorder2;
  errorBorder?: InputBorder3;
  /**
   * The maximum number of lines the error text can use.
   */
  errorMaxLines?: number;
  errorStyle?: TextStyle2;
  /**
   * The error text to display when the input has an error.
   */
  errorText?: string;
  fillColor?: Color9;
  /**
   * Whether the input is filled with fillColor.
   */
  filled?: boolean;
  floatingLabelBehavior?: FloatingLabelBehavior;
  floatingLabelStyle?: TextStyle3;
  focusColor?: Color10;
  focusedBorder?: InputBorder4;
  focusedErrorBorder?: InputBorder5;
  /**
   * The maximum number of lines the helper text can use.
   */
  helperMaxLines?: number;
  helperStyle?: TextStyle4;
  /**
   * The helper text to display.
   */
  helperText?: string;
  /**
   * The maximum number of lines the hint text can use.
   */
  hintMaxLines?: number;
  hintStyle?: TextStyle5;
  /**
   * The hint text to display.
   */
  hintText?: string;
  hintTextDirection?: TextDirection1;
  hoverColor?: Color11;
  icon?: Icon;
  iconColor?: Color12;
  /**
   * Whether the decoration is the same size as the input field.
   */
  isCollapsed?: boolean;
  /**
   * Whether the decoration is dense.
   */
  isDense?: boolean;
  label?: Component1;
  labelStyle?: TextStyle6;
  /**
   * The text that describes the input field.
   */
  labelText?: string;
  prefix?: Component1;
  prefixIcon?: Icon;
  prefixIconColor?: Color13;
  prefixIconConstraints?: BoxConstraints2;
  prefixStyle?: TextStyle7;
  /**
   * The text to display before the input.
   */
  prefixText?: string;
  /**
   * The semantic label for the counterText.
   */
  semanticCounterText?: string;
  suffix?: {
    [k: string]: unknown;
  };
  suffixIcon?: Icon;
  suffixIconColor?: Color14;
  suffixIconConstraints?: BoxConstraints3;
  suffixStyle?: TextStyle8;
  /**
   * The text to display after the input.
   */
  suffixText?: string;
}
/**
 * The border to display around the input. Will render a border by default when border is null.
 */
export interface InputBorder {
  type?: "underline" | "outline";
  borderRadius?: BorderRadius;
  borderSide: BorderSide;
}
/**
 * Element of type BoxConstraints
 */
export interface BoxConstraints1 {
  /**
   * The minWidth of the constraint
   */
  minWidth?: number;
  /**
   * The maxWidth of the constraint, -1 means Infinity
   */
  maxWidth?: number;
  /**
   * The minHeight of the constraint
   */
  minHeight?: number;
  /**
   * The maxHeight of the constraint, -1 means Infinity
   */
  maxHeight?: number;
}
/**
 * Element of type Padding
 */
export interface Padding1 {
  top?: number;
  left?: number;
  bottom?: number;
  right?: number;
}
/**
 * The style of the Text.
 */
export interface TextStyle1 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * The border to display when the input is disabled and not showing an error.
 */
export interface InputBorder1 {
  type?: "underline" | "outline";
  borderRadius?: BorderRadius;
  borderSide: BorderSide;
}
/**
 * The border to display when the input is enabled and not showing an error.
 */
export interface InputBorder2 {
  type?: "underline" | "outline";
  borderRadius?: BorderRadius;
  borderSide: BorderSide;
}
/**
 * The border to display when the input has an error and does not have the focus.
 */
export interface InputBorder3 {
  type?: "underline" | "outline";
  borderRadius?: BorderRadius;
  borderSide: BorderSide;
}
/**
 * The style of the Text.
 */
export interface TextStyle2 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * The style of the Text.
 */
export interface TextStyle3 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * The border to display when the input has the focus.
 */
export interface InputBorder4 {
  type?: "underline" | "outline";
  borderRadius?: BorderRadius;
  borderSide: BorderSide;
}
/**
 * The border to display when the input has the focus and has an error.
 */
export interface InputBorder5 {
  type?: "underline" | "outline";
  borderRadius?: BorderRadius;
  borderSide: BorderSide;
}
/**
 * The style of the Text.
 */
export interface TextStyle4 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * The style of the Text.
 */
export interface TextStyle5 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * The style of the Text.
 */
export interface TextStyle6 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * Element of type BoxConstraints
 */
export interface BoxConstraints2 {
  /**
   * The minWidth of the constraint
   */
  minWidth?: number;
  /**
   * The maxWidth of the constraint, -1 means Infinity
   */
  maxWidth?: number;
  /**
   * The minHeight of the constraint
   */
  minHeight?: number;
  /**
   * The maxHeight of the constraint, -1 means Infinity
   */
  maxHeight?: number;
}
/**
 * The style of the Text.
 */
export interface TextStyle7 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * Element of type BoxConstraints
 */
export interface BoxConstraints3 {
  /**
   * The minWidth of the constraint
   */
  minWidth?: number;
  /**
   * The maxWidth of the constraint, -1 means Infinity
   */
  maxWidth?: number;
  /**
   * The minHeight of the constraint
   */
  minHeight?: number;
  /**
   * The maxHeight of the constraint, -1 means Infinity
   */
  maxHeight?: number;
}
/**
 * The style of the Text.
 */
export interface TextStyle8 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * Element of type Padding
 */
export interface Padding2 {
  top?: number;
  left?: number;
  bottom?: number;
  right?: number;
}
/**
 * Defines the strut of a text line.
 */
export interface StrutStyle {
  /**
   * A label to help identify this strut style.
   */
  debugLabel?: string;
  /**
   * The font family to use for this strut style.
   */
  fontFamily?: string;
  /**
   * A list of fallback font families to use for this strut style.
   */
  fontFamilyFallback?: unknown[];
  /**
   * The font size to use for this strut style.
   */
  fontSize?: number;
  /**
   * The font weight to use for this strut style.
   */
  fontWeight?: string;
  /**
   * Whether to force the strut height.
   */
  forceStrutHeight?: boolean;
  /**
   * The minimum height of the strut.
   */
  height?: number;
  /**
   * The additional leading of the strut which is a multiple of fontSize.
   */
  leading?: number;
  leadingDistribution?: TextLeadingDitribution;
}
/**
 * The style of the Text.
 */
export interface TextStyle9 {
  color?: Color6;
  decoration?: TextDecoration;
  decorationColor?: Color7;
  decorationStyle?: TextDecorationStyle;
  /**
   * The thickness of the decoration.
   */
  decorationThickness?: number;
  /**
   * The font family of the text.
   */
  fontFamily?: string;
  /**
   * The list of font families to use if the first font family could not be found.
   */
  fontFamilyFallback?: string[];
  /**
   * The size of the text.
   */
  fontSize?: number;
  /**
   * The style of the text.
   */
  fontStyle?: "italic" | "normal";
  /**
   * The weight of the text.
   */
  fontWeight?: "bold" | "normal" | "w100" | "w200" | "w300" | "w400" | "w500" | "w600" | "w700" | "w800" | "w900";
  /**
   * The height of this text.
   */
  height?: number;
  /**
   * The amount of space to add between each letter.
   */
  letterSpacing?: number;
  /**
   * How visual text overflow should be handled.
   */
  overflow?: "clip" | "ellipsis" | "fade" | "visible";
  /**
   * A list of Shadows that will be painted underneath the text.
   */
  shadows?: BoxShadow[];
  textBaseline?: TextBaseline1;
  /**
   * The amount of space to add at each sequence of white-space.
   */
  wordSpacing?: number;
}
/**
 * The type of the keyboard to use for editing the text.
 */
export interface TextInputType {
  /**
   * Whether to show copy option in toolbar
   */
  copy?: boolean;
  /**
   * Whether to show cut option in toolbar
   */
  cut?: boolean;
  /**
   * Whether to show past option in toolbar
   */
  paste?: boolean;
  /**
   * Whether to show select all option in toolbar
   */
  selectAll?: boolean;
}
/**
 * This is used to receive a private command from the input method.
 */
export interface Listener6 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * Callback when the user changes the text field value.
 */
export interface Listener7 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * Callback when the user finishes editing the text field.
 */
export interface Listener8 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * Callback when the user tells he is done editing the text field.
 */
export interface Listener9 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * Callback when the user taps on the text field.
 */
export interface Listener10 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * Configuration of toolbar options
 */
export interface ToolbarOptions {
  /**
   * The number is decimal, allowing a decimal point to provide fractional
   */
  decimal?: boolean;
  /**
   * The number is signed, allowing a positive or negative sign at the start.
   */
  signed?: boolean;
}
/**
 * Element of type Toggle
 */
export interface Toggle {
  /**
   * The type of the element.
   */
  type: "toggle";
  /**
   * The value of the element.
   */
  value: boolean;
  /**
   * The splash radius when you click on the toggle.
   */
  splashRadius?: number;
  /**
   * The default focus in boolean.
   */
  autofocus?: boolean;
  /**
   * Determines the way that drag start behavior is handled.
   */
  dragStartBehavior?: "start" | "down";
  onPressed?: Listener;
  style?: ToggleStyle;
  /**
   * The name that will be used in the form.
   */
  name?: string;
  /**
   * The toggle is disabled if true
   */
  disabled?: boolean;
}
/**
 * Element of type ToggleStyle
 */
export interface ToggleStyle {
  activeColor?: Color1;
  activeTrackColor?: Color1;
  inactiveTrackColor?: Color1;
  inactiveThumbColor?: Color1;
  hoverColor?: Color1;
  focusColor?: Color1;
  activeThumbImage?: Image;
  inactiveThumbImage?: Image;
  materialTapTargetSize?: "padded" | "shrinkWrap";
}
/**
 * Element of type view
 */
export interface View {
  /**
   * The identifier of the component
   */
  type: "view";
  /**
   * The name of the view
   */
  name: string;
  props?: Props;
  find?: Find;
  /**
   * The query to apply to the data.
   */
  query?: {
    [k: string]: unknown;
  };
  /**
   * the collection where the query is applied
   */
  coll?: string;
  /**
   * The context projection. This field represents the projection of the context, allowing selective retrieval of specific elements. It is a map that specifies the desired elements to be included in the projection.
   */
  context?: {
    [k: string]: unknown;
  };
}
/**
 * Parameters passed to the listener
 */
export interface Props {
  [k: string]: unknown;
}
/**
 * Find query.
 */
export interface Find {
  /**
   * The query to apply to the data.
   */
  query?: {
    [k: string]: unknown;
  };
  /**
   * the collection where the query is applied
   */
  coll: string;
  /**
   * Filter data object.
   */
  projection?: {
    [k: string]: unknown;
  };
}
/**
 * Element of type Wrap
 */
export interface Wrap {
  /**
   * The identifier of the component
   */
  type: "wrap";
  /**
   * The children of the wrap.
   */
  children: Component1[];
  direction?: Direction;
  crossAxisAlignment?: WrapCrossAlignment;
  /**
   * The spacing between each child of the wrap.
   */
  spacing?: number;
  /**
   * The spacing between each run of the wrap.
   */
  runSpacing?: number;
  alignment?: WrapAlignment;
  runAlignment?: WrapAlignment;
  horizontalDirection?: TextDirection;
  verticalDirection?: VerticalDirection;
}
/**
 * The listener to be called when the actionable is pressed.
 */
export interface Listener11 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * The listener to be called when the actionable is double pressed.
 */
export interface Listener12 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * The listener to be called when the actionable is long pressed.
 */
export interface Listener13 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * The listener to be called when the actionable is pressed inside and released outside of the actionable, causing it to cancel the press action.
 */
export interface Listener14 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
/**
 * The listener to be called when the actionable is hovered and when the mouse exits the hoverable area.
 */
export interface Listener15 {
  /**
   * The action name to call
   */
  action: string;
  /**
   * Parameters passed to the listener
   */
  props?: {
    [k: string]: unknown;
  };
}
